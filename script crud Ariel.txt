//// para paises

create sequence pais_sequenceID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

create table Paises(
id_pais number(10) not null,
nombre_pais varchar(50),
codigo_pais varchar(4),
constraint pk_pais primary key(id_pais));

create or replace trigger paisInsertID
before insert on Paises
for each row
begin
select pais_sequenceID.nextval
INTO :new.id_pais
from dual;
end;


/// para clientes
create sequence cliente_sequenceID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

create table Cliente(
id_cliente number(10) not null,
nombre_cliente varchar(50) not null,
correo_cliente varchar(50) not null,
telefono_cliente int not null,
direccion varchar (200) not null,
id_pais int not null,
constraint pk_cliente primary key (id_cliente),
constraint fk_Paises foreign key (id_pais) references Paises(id_pais)
);

create or replace trigger clienteInsertID
before insert on Cliente
for each row
begin
select cliente_sequenceID.nextval
INTO :new.id_cliente
from dual;
end;


Create table Clientes_AUDITORIA(
id int not null,
usuario varchar(30),
fecha date,
nombre_cliente varchar(50) not null,
id_cliente number(10) not null,
accion varchar(30) not null,
constraint pk_auditoCliente primary key(id));


create sequence Cliente_AUDITORIA_sequenceID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

create or replace trigger Clientes_AUDITORIA_InsertID
before insert on Clientes_AUDITORIA
for each row
begin
select Cliente_AUDITORIA_sequenceID.nextval
INTO :new.id
from dual;
end;

create or replace trigger auditoriaCliente 
after DELETE or Insert Or update
on Cliente 
for each row
declare
usuario varchar(200);
accion varchar (50);
fecha date;
id int;
begin
select SYSDATE into  fecha from dual;
IF INSERTING then
accion := 'Insert';
id := 0;
usuario:= 'Admin';
Insert  into Clientes_AUDITORIA (id,usuario,fecha,nombre_cliente,id_cliente, accion) 
values (id, usuario,fecha,:new.nombre_cliente,:new.id_cliente,accion);
ELSIF UPDATING then
accion := 'Update';
id := 0;
usuario:= 'Admin';
Insert  into Clientes_AUDITORIA (id,usuario,fecha,nombre_cliente,id_cliente, accion) 
values (id, usuario,fecha,:old.nombre_cliente,:old.id_cliente,accion);
ELSIF DELETING then
accion := 'Delete';
id := 0;
usuario:= 'Admin';
Insert  into Clientes_AUDITORIA (id,usuario,fecha,nombre_cliente,id_cliente, accion) 
values (id, usuario,fecha,:old.nombre_cliente,:old.id_cliente,accion);
ELSE
DBMS_OUTPUT.put_line('error');
END IF;
END;

/////////////////////////////////////////////////////////////// 


create table Aerolinea(
id_aerolinea int not null,
nombre_aerolinea varchar(50),
constraint pk_aerolinea primary key (id_aerolinea)
);

select * from destino;

--insert into Aerolinea(id_aerolinea,nombre_aerolinea)
--values(1,'AmericaVuela');

create table Avion(
id_avion int not null,
id_aerolinea int not null,
modelo_avion varchar(50) not null,
capacidad_pasajeros int not null,
constraint pk_avion primary key (id_avion),
constraint fk_aerolinea foreign key (id_aerolinea) references Aerolinea(id_aerolinea)
);

--insert into Avion(id_avion,id_aerolinea,modelo_avion,capacidad_pasajeros)
--values(1,1,'AmericaVuela',250);

create table Destino(
id_destino int not null,
nombre_destino varchar(50) not null,
constraint pk_destino primary key (id_destino)
);

--insert into Destino(id_destino,nombre_destino)
--values(1,'Aeropueto Internacional El Dorado Colombia');

create table tipo_asiento(
id_tipo int not null,
nombre_tipo_asiento varchar(50),
constraint pk_tipo primary key(id_tipo)
);


insert into tipo_asiento(id_tipo,nombre_tipo_asiento)
values(20,'asiento de clase economica');

insert into tipo_asiento(id_tipo,nombre_tipo_asiento)
values(10,'VIP');

create table Vuelos(
id_vuelo int not null,
nombre_vuelo varchar(50) not null,
origen varchar(50) not null,
id_destino int not null,
id_avion int not null,
id_tipo_asiento int null,
constraint pk_vuelo primary key (id_vuelo),
constraint fk_id_destino foreign key (id_destino) references Destino(id_destino),
constraint fk_id_avion foreign key (id_avion) references Avion(id_avion),
constraint fk_id_tipo_asiento foreign key (id_tipo_asiento) references tipo_asiento(id_tipo)
);

--insert into Vuelos(id_vuelo,nombre_vuelo,origen,id_destino,id_avion,id_tipo_asiento)
--values(1018,'NOMBRE','Aeropuerto interncionla Juan Santa María',1,1,20);

////////////////////////////////////////////

create table Reserva(
id_reserva int not null,
id_vuelo int not null,
precio_boleto int not null,
cantidad_boletos int not null,
id_cliente int not null,
constraint pk_id_reserva primary key (id_reserva),
constraint fk_id_vuelos foreign key (id_vuelo) references Vuelos(id_vuelo),
constraint fk_id_cliente foreign key (id_cliente) references Cliente(id_cliente)
);

create sequence reserva_sequenceID
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;

create or replace trigger reservaInsertID
before insert on Reserva
for each row
begin
select reserva_sequenceID.nextval
INTO :new.id_reserva
from dual;
end;

///////////////////////////////////////////////////////// vuelos

CREATE OR REPLACE PROCEDURE insertar_vuelo ( 
p_id_vuelo IN int, p_nombre_vuelo IN VARCHAR, 
p_origen IN VARCHAR, p_id_destino IN int, 
p_id_avion IN int, 
p_id_tipo_asiento IN int
)
IS
BEGIN
   INSERT INTO vuelos (
      id_vuelo,
      nombre_vuelo,
      origen,
      id_destino,
      id_avion,
      id_tipo_asiento
   ) VALUES (
      p_id_vuelo,
      p_nombre_vuelo,
      p_origen,
      p_id_destino,
      p_id_avion,
      p_id_tipo_asiento
   );
   
   COMMIT;
   
   DBMS_OUTPUT.PUT_LINE('Vuelo insertado correctamente.');
EXCEPTION
   WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error al insertar vuelo: ' || SQLERRM);
END insertar_vuelo;

--BEGIN
--   insertar_vuelo(1243, 'akldsjf', 'Ciudad de México', 1, 1, 20);
--END;


CREATE OR REPLACE PROCEDURE agregar_aerolinea (
  p_id_aerolinea IN NUMBER,
  p_nombre_aerolinea IN VARCHAR2
)
AS
BEGIN
  INSERT INTO aerolinea (id_aerolinea, nombre_aerolinea)
  VALUES (p_id_aerolinea, p_nombre_aerolinea);
  
  COMMIT;
END;

CREATE OR REPLACE PROCEDURE agregar_avion (
  p_id_avion IN NUMBER,
  p_id_aerolinea IN NUMBER,
  p_modelo_avion IN VARCHAR2,
  p_capacidad_pasajeros IN NUMBER
)
AS
BEGIN
  INSERT INTO avion (id_avion, id_aerolinea, modelo_avion, capacidad_pasajeros)
  VALUES (p_id_avion, p_id_aerolinea, p_modelo_avion, p_capacidad_pasajeros);
  
  COMMIT;
END;
